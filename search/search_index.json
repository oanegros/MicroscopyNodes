{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Microscopy in Blender","text":"<p>This is a project building bioimage support for the open source software blender. This currently exists as the Blender add-on <code>Microscopy Nodes</code>, previously named <code>tif2blender</code>. This is able to easily load tif files as volumetric objects in Blender. </p> <p>Please make some pretty figures with this add-on! </p> <p>For usage questions please use the image.sc forum \ud83d\ude01 For issues/bug reports/feature requests please open an issue.</p> <p>If you publish with this add-on, please cite the preprint:</p> <pre><code>@article {Gros2025.01.09.632153,\n    author = {Gros, Oane and Bhickta, Chandni and Lokaj, Granita and Schwab, Yannick and K{\\\"o}hler, Simone and Banterle, Niccol{\\`o}},\n    title = {Microscopy Nodes: versatile 3D microscopy visualization with Blender},\n    elocation-id = {2025.01.09.632153},\n    year = {2025},\n    doi = {10.1101/2025.01.09.632153},\n    publisher = {Cold Spring Harbor Laboratory},\n    URL = {https://www.biorxiv.org/content/early/2025/01/14/2025.01.09.632153},\n    eprint = {https://www.biorxiv.org/content/early/2025/01/14/2025.01.09.632153.full.pdf},\n    journal = {bioRxiv}\n} \n</code></pre>"},{"location":"#current-features","title":"Current Features","text":"<p>Microscopy Nodes supports:</p> <ul> <li>up to 5D (up to tzcyx in any axis order) tifs and OME-Zarr files can be loaded. </li> <li>Channel interface to define how to load data</li> <li>Replacing a pyramidal dataset with it's higher resolution version</li> <li>Accurate scale bars</li> <li>Load per-index label masks</li> <li>Lazy loading of giant files (no data is loaded in RAM outside what's rendered)</li> </ul>"},{"location":"#get-started","title":"Get Started!","text":""},{"location":"background/","title":"Replace data in background","text":"<p>Blender can run and render as a background job without a UI. This is very advantageous if you have very large pyramidal stack sizes you want to render your data at, and access to some form of HPC cluster.  To replace your data with a different size, you set up all the Microscopy Nodes settings to reload at the right scale, and run a headless python script that looks like this:</p> <pre><code>import bpy\nbpy.ops.microscopynodes.load_background()\nbpy.ops.wm.save_mainfile()\n</code></pre> <p>by running: <code>/path/to/Blender/executable -b /path/to/blendfile.blend -P /path/to/reload_script.py</code></p> <p>This will then load the data according to the Microscopy Nodes settings, and resave the .blend file. </p> <p>You can subsequently render headlessly as well, here you can follow the Blender documentation on this.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>If yours is not in here, don't be afraid to open an issue!</p>"},{"location":"faq/#how-are-things-transformed","title":"How are things transformed?","text":"How is data transformed on load? The data is scaled to 0.02 blender-meter per pixel on an initial load and centered in x and y. If you reload an image with a differently scaled version, it will adapt itself to the initial scale. You can check the size in pixels, blender meters and micrometers in the `Axes` object.  Why does my volume consist of multiple blocks? Currently, Blender cannot handle volumes that are over 2048 pixels in any axis, so Microscopy Nodes chunks this type of data to smaller blocks. This should still be fully equal data (floating-point datasets may suffer from incorrect normalization), channel chunks are offset to avoid Blender rendering bugs.  Why is my data a bigger file than i expected in Blender? The blender VDB files are saved at 32-bit, and can regrettably not be at smaller precision. However, for functionality, and because very little data in microscopy is over 16-bit, only a 16-bit version of the data is loaded into RAM."},{"location":"faq/#i-dont-see-my-data","title":"I don't see my data?","text":"I do not see my surfaces? Try adjusting the threshold in the Surface Geometry Nodes modifier, the visibility of the Surfaces object, or the visibility of each channel in the Geometry Nodes modifier.  I do not see my volumes? Try adjusting the threshold in the materials, the visibility of the Volumes object, or the visibility of each channel in the Geometry Nodes modifier. If the emission of the channel was off, make sure there is enough light in the scene to reflect (often done with increasing background intensity)."},{"location":"file_types/","title":"File types","text":"<p>Microscopy Nodes as an add-on mostly exists to read microscopy data, rewrite this into Blender-loadable file formats, and load this with useful presets. </p>"},{"location":"file_types/#input","title":"Input","text":"<p>Microscopy Nodes supports .tif and .zarr files/containers. These file types are used in microscopy partially because they have very flexible (or flexibly used) specifications. This means supporting all versions these files can exist in is difficult. </p>"},{"location":"file_types/#tif-files","title":"TIF files","text":"<p>Microscopy Nodes loads tif files, and is able to read basic metadata of imagej-tif files. LZW-compressed tif is supported. Further OME-Tif metdata is currently not read, if you really need this, please open an isssue on the github.</p>"},{"location":"file_types/#ome-zarr-files","title":"OME-Zarr files","text":"<p>OME-Zarr is a still-developing pyramidal data format with a lot of features, some of which are harder to support in Blender. Please open an issue if you really want a certain feature. Microscopy Nodes supports:</p> <ul> <li>OME-Zarr &gt;= 0.3</li> <li>channel names from <code>omero</code></li> <li>lazy loading (per channel/timpoint at least)</li> <li>dataset selection</li> <li>coordinate transform Scale</li> <li><code>labels</code> metadata</li> </ul> <p>Microscopy Nodes does not support (currently):</p> <ul> <li>wells/fields</li> <li>affine/translate coordinate transforms</li> <li>bioformats2raw multiple loading (or others with multiple datasets, one could still select the relevant internal path)</li> </ul>"},{"location":"file_types/#output","title":"Output","text":"<p>Output files are the files used by Blender to render your data.</p>"},{"location":"file_types/#vdb-files","title":"VDB files","text":"<p>The .vdb is the volume file-format that Blender uses, and is very optimized for raytraced rendering of sparse volumes, as this is often necessary in animation for clouds/fire. The Microscopy Nodes vdb files are chunked per timepoint and channel to allow relatively lazy loading, and are chunked at &lt;2048 pixels per axis as oversized volumes can break Eevee.</p>"},{"location":"file_types/#abc-files","title":"ABC files","text":"<p>The .abc files are the way label masks are stored, as these files allow changing the entire geometry of each object for each timepoint. These are written through the Blender writing pipeline for each separate object, which is part of why label mask loading can be slow for dense masks.</p>"},{"location":"new_user/","title":"Getting started","text":""},{"location":"new_user/#installing-microscopy-nodes","title":"Installing Microscopy Nodes","text":"<p>You can download and install the add-on on the Blender extensions platform or by searching for Microscopy Nodes in the Extensions in your Blender preferences. For installing with earlier Blender versions than 4.2, follow the legacy install instructions.</p> <p>The add-on will then show up as a window in the <code>Scene Properties</code>.</p>"},{"location":"new_user/#using-microscopy-nodes","title":"Using Microscopy Nodes","text":"<p>Load any tif or zarr file by inputting the path or URL in the appropriate window in the <code>Microscopy Nodes</code> panel. This will read out metadata and prompt you to define how you want to load the data.</p> <ul> <li> <p>generic options</p> <ul> <li>axis order</li> <li>pixel size in \u00b5m</li> <li>dataset (for pyramidal Zarr data)</li> <li>reload data</li> </ul> </li> <li> <p>per-channel load options:</p> <ul> <li>load volumetric data</li> <li>load Blender isosurface</li> <li>load labelmask</li> </ul> </li> <li> <p>per-channel visuzalization options:</p> <ul> <li>emission</li> <li>surface resolution</li> </ul> </li> <li> <p>extra options</p> <ul> <li>data storage location</li> <li>overwrite existing local files</li> <li>preset environment</li> </ul> </li> </ul>"},{"location":"new_user/#video-tutorials","title":"Video tutorials","text":"<p>See the video introductions to the microscopynodes add-on on youtube. There's multiple playlists on the account, and they'll show you how to go from installing to rendering a presentation-ready video for fluorescence and electron microscopy.</p>"},{"location":"objects/","title":"Microscopy Nodes Objects","text":"<p>Microscopy Nodes gathers its objects in multiple main holders, for different visualization types or functions. Most of the data representation Objects are internally geometry nodes objects loading collections in the <code>cache</code>. </p>"},{"location":"objects/#axes","title":"Axes","text":"<p>The <code>Axes</code> object is always loaded and draws a grid of scale bars based on the number of pixels and the pixel size as defined when the data is loaded. </p> <p>Many axis settings are user-adaptable in the Geometry Nodes of the object. Here you can still adapt pixel size (this will not rescale for isotropy), which parts of the grid are drawn, line thickness. </p> <p>In Microscopy Nodes, it is chosen to only implement a scale grid, as the default cameras in Blender are perspective cameras, where a scale bar is not valid. If you do want an orthographic camera with scale bar, it is recommended to use the fields in the <code>Axes</code> Geometry Nodes, where the data's size in blender meters is calculated to scale a cube object.</p>"},{"location":"objects/#volumes","title":"Volumes","text":"<p>Volumes are the default loaded object in Microscopy Nodes. This will render the microscopy data in a way where each voxel contributes to the rendered output, either by emitting light (analogous to fire) or absorbing light (analogous to fog). Switching between these modes can be quickly done through the emission setting.</p> <p>Thresholding the data can be done in the per-channel Materials of the volumes object, easiest found in the <code>Shading</code> workflow, with a histogram of the data on load.</p>"},{"location":"objects/#surfaces","title":"Surfaces","text":"<p>Surfaces are isosurface objects, where a Mesh is generated at a specific threshold value to render the microscopic volume as a surface. This thus only shows a thresholded version of the image, the threshold can be adjusted at its Geometry Nodes modifier. The resolution default can be set with the surface resolution setting, but can be easily changed (if not at <code>Actual</code>) in the Geometry Nodes of the surfaces object. </p> <p>This is not only a useful mode for image data, but also for masks where the values of the separate objects do not matter, as it is more adaptable, lightweight and blender-integrated than the labelmasks.</p> <p>This is essentially the same loaded vdb data as in the volumes, just with a Volume to Mesh Geometry Node in between. This means it is trivial to load either the volume or the mesh if the other is loaded, so if only one is activated the other will be loaded in deactivated state.</p>"},{"location":"objects/#masks","title":"Masks","text":"<p>Label masks - defined as masks where each object has a separate integer value - can be loaded as separate meshes when loaded as label mask in Microscopy Nodes. This will split apart each object, and turn it into a mesh and load this mesh into Blender. This means it can be slow/RAM-heavy as meshing is not alway a fast operation, and that changing surface resolution will involve remeshing all objects.</p> <p>However, this load mode does give a way to have every individual object in your mask have a separate color, and also Geometry Nodes programmable selectability and transformation of specific object identities.</p>"},{"location":"objects/#slice-cube","title":"Slice cube","text":"<p>The slice cube is a generic cube with alpha set to 0 so it is invisible. When the slice cube is moved or scaled, this will slice all the objects in the data objects to show only the parts inside the cube. </p> <p>The slicing behaviour is defined in the Material of each separate object, which points to get the coordinates of the Slice Cube. This means that you can always swap out the Slice Cube for another cube, if you want to slice two different channels/objects differently. </p>"},{"location":"outdated/","title":"Installing and using Microscopy Nodes with Blender &lt; 4.2","text":""},{"location":"outdated/#install","title":"Install","text":"<ul> <li>Download an appropriate microscopynodes/tif2blender zip file from the releases page. Please note the Blender version number.</li> </ul> <p>Start blender.</p> <p>Install the <code>microscopynodes</code> Add-On: - In Blender go to <code>Edit &gt; Preferences</code> - Go to <code>Add-Ons</code> tab in <code>Preferences</code> - Press <code>Install</code> and give the <code>tif_loader.zip</code> file (as .zip) - In the added <code>microscopynodes</code> add-on window in <code>Preferences</code>: press the tick box to enable, and the arrow to unfold the details - in the details press <code>install tifffile</code> - (if this fails please try restarting blender and seeing if it can then find <code>tifffile</code>)</p>"},{"location":"outdated/#updating-microscopynodes","title":"Updating <code>microscopynodes</code>","text":"<p>To update the <code>microscopynodes</code> add-on (future versions may have bugfixes, new features) a few steps need to be taken: - In Blender go to <code>Edit &gt; Preferences</code> - Go to <code>Add-Ons</code> tab in <code>Preferences</code> and find the <code>microscopynodes</code> add-on - Press <code>Remove</code>  - Restart Blender - Install the new version.</p>"},{"location":"settings/","title":"Microscopy Nodes User Settings","text":"<p>The Microscopy Nodes panel has multiple different settings, which affect the import, resaving and reloading of data.</p>"},{"location":"settings/#emission","title":"Emission","text":"<p>A per-channel settign for whether a volume will emit light or absorb light upon load. It is standard practice for fluorescence images to emit light and electron microscopy to absorb light, as this reflects the physics of the acquisition process. However, this is of course not necessary.</p>"},{"location":"settings/#surface-resolution","title":"Surface Resolution","text":"<p>Constructing isosurfaces, such as done for both surfaces and label masks is an expensive operation and can consume too much RAM. By reducing the fineness of the surface mesh, this can be alleviated.</p> <p>To note: both ways that are used to mesh volumes in Microscopy Nodes, Blender Volume to Mesh and scikit-image marching_cubes currently have issues that they do not always correctly report when they're out of RAM. If the loading seems extremely long, it may be better to restart blender and try at lower resolution.</p>"},{"location":"settings/#reload","title":"Reload","text":"<p>Reloading data of a previously loaded Microscopy Nodes object can be useful in multiple circumstances: - Changing which/how channels are loaded - Replacing temporary files that got deleted - Changing resolution of Zarr This will reload and update the visualization of the object with the data that is currently in the input file slot. It will attempt to retain as much user-made changes as possible and only update those settings that are changed.  To do this it uses some specific names in the Microscopy Nodes objects. Any of these that are used are enclosed in square brackets.</p>"},{"location":"settings/#resave-location","title":"Resave Location","text":"<p>The resave location is the location where all blender-compatible files will be stored, this will often be at the size of your entire dataset. Temporary is default, as we assume the first attempt at loading will be just temporary. </p> <p>If you want the <code>.blend</code> blender project to be portable between machines, it is often best to use the <code>With Project</code> saving, as relative paths to the data are saved in the file. </p>"},{"location":"settings/#overwrite","title":"Overwrite","text":"<p>This is mostly a debug option, but may be relevant if you have files with identical filenames. This forces all Microscopy Nodes local files to be overwritten before loading.</p>"},{"location":"settings/#preset-environment","title":"Preset Environment","text":"<p>Presetting the environment overwrites a bunch of environment variables, such as background color, render samples, volumetric target pixel size and others to provide a good starting point for rendering microscopy data. This turns itself off after the first load so user-set values are not accidentally overriden.</p>"}]}